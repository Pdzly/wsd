services:
  backend:
    image: wsd:latest
    build:
      context: ./wsd
      dockerfile: Dockerfile
    env_file: .env
    networks:
      - internal
      - external
    volumes:
      - user_uploads:/wsd/mediafiles
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped

  server:
    build:
      context: ./wsd-server
      dockerfile: Dockerfile
    env_file: .env
    ports:
      - "${WSD_SERVER_PORT}:80"
    depends_on:
      backend:
        condition: service_started
    networks:
      internal:
      external:
        aliases:
          - "${WSD_SERVER_NETWORK_APEX_DOMAIN_ALIAS}"
          - "${WSD_SERVER_NETWORK_API_SUBDOMAIN_ALIAS}"
          - "${WSD_SERVER_NETWORK_AUTH_SUBDOMAIN_ALIAS}"
          - "${WSD_SERVER_NETWORK_ADMIN_SUBDOMAIN_ALIAS}"
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"

  database:
    build:
      context: ./wsd-database
      dockerfile: Dockerfile
    env_file: .env
    environment:
      POSTGRES_DB: ${WSD__DB__NAME}
      POSTGRES_USER: ${WSD__DB__USER}
      POSTGRES_PASSWORD: ${WSD__DB__PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${WSD__DB__USER}" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3
    env_file: .env
    networks:
      - internal
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 10s
      retries: 10

  celery:
    image: wsd:latest
    command: celery -A wsd worker --pool=threads --concurrency=10  # threads option is important for tensorflow
    env_file: .env
    volumes:
      - user_uploads:/wsd/mediafiles
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - internal
      - external  # Needs to download static files and send errors to sentry
    restart: unless-stopped

  celery-beat:
    image: wsd:latest
    command: celery -A wsd beat
    env_file: .env
    volumes:
      - user_uploads:/wsd/mediafiles
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      backend:
        condition: service_started
    networks:
      - internal
      - external  # Needs to download static files and send errors to sentry
    restart: unless-stopped

volumes:
  postgres_data:
  user_uploads:

networks:
  internal:
    internal: true
  external:
    driver: bridge
