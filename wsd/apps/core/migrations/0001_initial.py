# Generated by Django 5.1.3 on 2024-11-27 12:35

import uuid

import django.core.validators
import django.db.models.deletion
import django_lifecycle.mixins
import pgtrigger.compiler
import pgtrigger.migrations
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("pghistory", "0006_delete_aggregateevent"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="PostTag",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        db_index=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.SlugField(blank=True, null=True, verbose_name="Slug")),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True, verbose_name="Created At")),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True, verbose_name="Updated At")),
                (
                    "name",
                    models.CharField(
                        help_text="The tag's name, the tag itself.",
                        max_length=100,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[a-zA-Z0-9_.-]*$", "Tags can only contain letters, numbers, - and _."
                            )
                        ],
                        verbose_name="Name",
                    ),
                ),
            ],
            options={
                "verbose_name": "Post Tag",
                "verbose_name_plural": "Post Tags",
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="PostTagEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField(blank=True, db_index=False, null=True, verbose_name="Slug")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="Created At")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Updated At")),
                (
                    "name",
                    models.CharField(
                        help_text="The tag's name, the tag itself.",
                        max_length=100,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[a-zA-Z0-9_.-]*$", "Tags can only contain letters, numbers, - and _."
                            )
                        ],
                        verbose_name="Name",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PostVote",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        db_index=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.SlugField(blank=True, null=True, verbose_name="Slug")),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True, verbose_name="Created At")),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True, verbose_name="Updated At")),
                (
                    "body",
                    models.IntegerField(
                        choices=[(1, "Upvote"), (-1, "Downvote")],
                        help_text="The actual vote. -1 or +1",
                        verbose_name="Body",
                    ),
                ),
            ],
            options={
                "verbose_name": "Post Vote",
                "verbose_name_plural": "Post Votes",
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="PostVoteEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField(blank=True, db_index=False, null=True, verbose_name="Slug")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="Created At")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Updated At")),
                (
                    "body",
                    models.IntegerField(
                        choices=[(1, "Upvote"), (-1, "Downvote")],
                        help_text="The actual vote. -1 or +1",
                        verbose_name="Body",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserPostView",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        db_index=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.SlugField(blank=True, null=True, verbose_name="Slug")),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True, verbose_name="Created At")),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True, verbose_name="Updated At")),
            ],
            options={
                "verbose_name": "User Post View",
                "verbose_name_plural": "User Post Views",
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="UserPostViewEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField(blank=True, db_index=False, null=True, verbose_name="Slug")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="Created At")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Updated At")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OriginalSourceClaim",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        db_index=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.SlugField(blank=True, null=True, verbose_name="Slug")),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True, verbose_name="Created At")),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True, verbose_name="Updated At")),
                (
                    "comment",
                    models.TextField(help_text="Comments about the source.", max_length=1000, verbose_name="Comment"),
                ),
                ("source", models.URLField(help_text="The source of the original post.", verbose_name="Source")),
                (
                    "status",
                    models.CharField(
                        choices=[("pending", "Pending"), ("approved", "Approved"), ("rejected", "Rejected")],
                        default="pending",
                        help_text="The status of the claim.",
                        max_length=100,
                        verbose_name="Status",
                    ),
                ),
                (
                    "contact_information",
                    models.TextField(
                        blank=True,
                        help_text="Contact Information for the user, so that we can get in touch about this claim",
                        max_length=1000,
                        null=True,
                        verbose_name="Contact information",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who made the claim.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="original_source_claims",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Original Source Claim",
                "verbose_name_plural": "Original Source Claims",
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        db_index=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.SlugField(blank=True, null=True, verbose_name="Slug")),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True, verbose_name="Created At")),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True, verbose_name="Updated At")),
                ("title", models.CharField(help_text="Title of the post.", max_length=100, verbose_name="Title")),
                ("image", models.ImageField(help_text="The post itself.", upload_to="posts", verbose_name="Image")),
                (
                    "is_repost",
                    models.BooleanField(
                        default=False, help_text="Whether this post is a repost or not.", verbose_name="Is Repost"
                    ),
                ),
                (
                    "original_source",
                    models.URLField(
                        blank=True,
                        help_text="Verified original source of this post.",
                        null=True,
                        verbose_name="Original Source",
                    ),
                ),
                (
                    "cryptographic_hash",
                    models.CharField(
                        blank=True,
                        help_text="SHA-256 value of the image.",
                        max_length=64,
                        null=True,
                        verbose_name="Cryptographic Hash (SHA-256)",
                    ),
                ),
                (
                    "phash",
                    models.CharField(
                        blank=True,
                        help_text="PHash value of the image.",
                        max_length=16,
                        null=True,
                        verbose_name="PHash",
                    ),
                ),
                (
                    "dhash",
                    models.CharField(
                        blank=True,
                        help_text="DHash value of the image.",
                        max_length=16,
                        null=True,
                        verbose_name="DHash",
                    ),
                ),
                (
                    "whash",
                    models.CharField(
                        blank=True,
                        help_text="WHash value of the image.",
                        max_length=16,
                        null=True,
                        verbose_name="WHash",
                    ),
                ),
                (
                    "average_hash",
                    models.CharField(
                        blank=True,
                        help_text="Average Hash value of the image.",
                        max_length=16,
                        null=True,
                        verbose_name="Average Hash",
                    ),
                ),
                (
                    "colorhash",
                    models.CharField(
                        blank=True,
                        help_text="Color Hash value of the image.",
                        max_length=14,
                        null=True,
                        verbose_name="Color Hash",
                    ),
                ),
                (
                    "extracted_text_raw",
                    models.TextField(
                        blank=True,
                        help_text="The raw extracted text from the post, with newlines and everything",
                        max_length=10000,
                        null=True,
                        verbose_name="Raw Extracted Text",
                    ),
                ),
                (
                    "extracted_text_normalized",
                    models.TextField(
                        blank=True,
                        help_text="The extracted text from the post, after clearing new lines, extra space and everything else.",
                        max_length=10000,
                        null=True,
                        verbose_name="Normalized Extracted Text",
                    ),
                ),
                (
                    "initial",
                    models.ForeignKey(
                        blank=True,
                        help_text="The very first instance of this post in our system, if null, it means this is the initial",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reposts",
                        to="core.post",
                        verbose_name="Initial",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who posted this post.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="posts",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Post",
                "verbose_name_plural": "Posts",
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="OriginalSourceClaimEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField(blank=True, db_index=False, null=True, verbose_name="Slug")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="Created At")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Updated At")),
                (
                    "comment",
                    models.TextField(help_text="Comments about the source.", max_length=1000, verbose_name="Comment"),
                ),
                ("source", models.URLField(help_text="The source of the original post.", verbose_name="Source")),
                (
                    "status",
                    models.CharField(
                        choices=[("pending", "Pending"), ("approved", "Approved"), ("rejected", "Rejected")],
                        default="pending",
                        help_text="The status of the claim.",
                        max_length=100,
                        verbose_name="Status",
                    ),
                ),
                (
                    "contact_information",
                    models.TextField(
                        blank=True,
                        help_text="Contact Information for the user, so that we can get in touch about this claim",
                        max_length=1000,
                        null=True,
                        verbose_name="Contact information",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="events",
                        to="core.originalsourceclaim",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        db_constraint=False,
                        help_text="User who made the claim.",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        db_constraint=False,
                        help_text="The post this claim is for.",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="core.post",
                        verbose_name="Post",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="originalsourceclaim",
            name="post",
            field=models.ForeignKey(
                help_text="The post this claim is for.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="original_source_claims",
                to="core.post",
                verbose_name="Post",
            ),
        ),
        migrations.CreateModel(
            name="PostComment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        db_index=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.SlugField(blank=True, null=True, verbose_name="Slug")),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True, verbose_name="Created At")),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True, verbose_name="Updated At")),
                ("body", models.TextField(help_text="The actual comment.", verbose_name="Body")),
                (
                    "post",
                    models.ForeignKey(
                        help_text="The post this comment is for.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="core.post",
                        verbose_name="Post",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who wrote this comment.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="post_comments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Post Comment",
                "verbose_name_plural": "Post Comments",
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="PostCommentEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField(blank=True, db_index=False, null=True, verbose_name="Slug")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="Created At")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Updated At")),
                ("body", models.TextField(help_text="The actual comment.", verbose_name="Body")),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="events",
                        to="core.postcomment",
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        db_constraint=False,
                        help_text="The post this comment is for.",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="core.post",
                        verbose_name="Post",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        db_constraint=False,
                        help_text="User who wrote this comment.",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PostCommentVote",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        db_index=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.SlugField(blank=True, null=True, verbose_name="Slug")),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True, verbose_name="Created At")),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True, verbose_name="Updated At")),
                (
                    "body",
                    models.IntegerField(
                        choices=[(1, "Upvote"), (-1, "Downvote")],
                        help_text="The actual vote. -1 or +1",
                        verbose_name="Body",
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        help_text="The post this vote is for.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="votes",
                        to="core.postcomment",
                        verbose_name="Post",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The voter.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="post_comment_votes",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "PostComment Vote",
                "verbose_name_plural": "Post Comment Votes",
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="PostCommentVoteEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField(blank=True, db_index=False, null=True, verbose_name="Slug")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="Created At")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Updated At")),
                (
                    "body",
                    models.IntegerField(
                        choices=[(1, "Upvote"), (-1, "Downvote")],
                        help_text="The actual vote. -1 or +1",
                        verbose_name="Body",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="events",
                        to="core.postcommentvote",
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        db_constraint=False,
                        help_text="The post this vote is for.",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="core.postcomment",
                        verbose_name="Post",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        db_constraint=False,
                        help_text="The voter.",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PostEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField(blank=True, db_index=False, null=True, verbose_name="Slug")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="Created At")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Updated At")),
                ("title", models.CharField(help_text="Title of the post.", max_length=100, verbose_name="Title")),
                ("image", models.ImageField(help_text="The post itself.", upload_to="posts", verbose_name="Image")),
                (
                    "is_repost",
                    models.BooleanField(
                        default=False, help_text="Whether this post is a repost or not.", verbose_name="Is Repost"
                    ),
                ),
                (
                    "original_source",
                    models.URLField(
                        blank=True,
                        help_text="Verified original source of this post.",
                        null=True,
                        verbose_name="Original Source",
                    ),
                ),
                (
                    "cryptographic_hash",
                    models.CharField(
                        blank=True,
                        help_text="SHA-256 value of the image.",
                        max_length=64,
                        null=True,
                        verbose_name="Cryptographic Hash (SHA-256)",
                    ),
                ),
                (
                    "phash",
                    models.CharField(
                        blank=True,
                        help_text="PHash value of the image.",
                        max_length=16,
                        null=True,
                        verbose_name="PHash",
                    ),
                ),
                (
                    "dhash",
                    models.CharField(
                        blank=True,
                        help_text="DHash value of the image.",
                        max_length=16,
                        null=True,
                        verbose_name="DHash",
                    ),
                ),
                (
                    "whash",
                    models.CharField(
                        blank=True,
                        help_text="WHash value of the image.",
                        max_length=16,
                        null=True,
                        verbose_name="WHash",
                    ),
                ),
                (
                    "average_hash",
                    models.CharField(
                        blank=True,
                        help_text="Average Hash value of the image.",
                        max_length=16,
                        null=True,
                        verbose_name="Average Hash",
                    ),
                ),
                (
                    "colorhash",
                    models.CharField(
                        blank=True,
                        help_text="Color Hash value of the image.",
                        max_length=14,
                        null=True,
                        verbose_name="Color Hash",
                    ),
                ),
                (
                    "extracted_text_raw",
                    models.TextField(
                        blank=True,
                        help_text="The raw extracted text from the post, with newlines and everything",
                        max_length=10000,
                        null=True,
                        verbose_name="Raw Extracted Text",
                    ),
                ),
                (
                    "extracted_text_normalized",
                    models.TextField(
                        blank=True,
                        help_text="The extracted text from the post, after clearing new lines, extra space and everything else.",
                        max_length=10000,
                        null=True,
                        verbose_name="Normalized Extracted Text",
                    ),
                ),
                (
                    "initial",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The very first instance of this post in our system, if null, it means this is the initial",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="core.post",
                        verbose_name="Initial",
                    ),
                ),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="events",
                        to="core.post",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        db_constraint=False,
                        help_text="User who posted this post.",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="PostObjectTag",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        db_index=True,
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.SlugField(blank=True, null=True, verbose_name="Slug")),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True, verbose_name="Created At")),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True, verbose_name="Updated At")),
                (
                    "post",
                    models.ForeignKey(
                        help_text="The post this tag is for.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="post_tags",
                        to="core.post",
                        verbose_name="Post",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        help_text="The Tag.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="post_tags",
                        to="core.posttag",
                        verbose_name="Tag",
                    ),
                ),
            ],
            options={
                "verbose_name": "Post Object Tag",
                "verbose_name_plural": "Post Object Tags",
            },
            bases=(django_lifecycle.mixins.LifecycleModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="PostObjectTagEvent",
            fields=[
                ("pgh_id", models.AutoField(primary_key=True, serialize=False)),
                ("pgh_created_at", models.DateTimeField(auto_now_add=True)),
                ("pgh_label", models.TextField(help_text="The event label.")),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, serialize=False, verbose_name="ID")),
                ("slug", models.SlugField(blank=True, db_index=False, null=True, verbose_name="Slug")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="Created At")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Updated At")),
                (
                    "pgh_context",
                    models.ForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="pghistory.context",
                    ),
                ),
                (
                    "pgh_obj",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="events",
                        to="core.postobjecttag",
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        db_constraint=False,
                        help_text="The post this tag is for.",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="core.post",
                        verbose_name="Post",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        db_constraint=False,
                        help_text="The Tag.",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        related_query_name="+",
                        to="core.posttag",
                        verbose_name="Tag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="post",
            name="tags",
            field=models.ManyToManyField(blank=True, through="core.PostObjectTag", to="core.posttag"),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="posttag",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "core_posttagevent" ("created_at", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "slug", "updated_at") VALUES (NEW."created_at", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."slug", NEW."updated_at"); RETURN NULL;',
                    hash="0dd8a8e2807bf2763d0e6378bc36f685d796f726",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_a40c3",
                    table="core_posttag",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="posttag",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "core_posttagevent" ("created_at", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "slug", "updated_at") VALUES (NEW."created_at", NEW."id", NEW."name", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."slug", NEW."updated_at"); RETURN NULL;',
                    hash="9391fa288d324e67a3f10cd3a60e3d7a8dbba96e",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_8cd03",
                    table="core_posttag",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="posttag",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "core_posttagevent" ("created_at", "id", "name", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "slug", "updated_at") VALUES (OLD."created_at", OLD."id", OLD."name", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."slug", OLD."updated_at"); RETURN NULL;',
                    hash="fc7cfa0884bc2898936a08fcf165fc4d79ebf113",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_975da",
                    table="core_posttag",
                    when="AFTER",
                ),
            ),
        ),
        migrations.AddField(
            model_name="posttagevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="posttagevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="core.posttag",
            ),
        ),
        migrations.AddField(
            model_name="postvote",
            name="post",
            field=models.ForeignKey(
                help_text="The post this vote is for.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="votes",
                to="core.post",
                verbose_name="Post",
            ),
        ),
        migrations.AddField(
            model_name="postvote",
            name="user",
            field=models.ForeignKey(
                help_text="The voter.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="post_votes",
                to=settings.AUTH_USER_MODEL,
                verbose_name="User",
            ),
        ),
        migrations.AddField(
            model_name="postvoteevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="postvoteevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="core.postvote",
            ),
        ),
        migrations.AddField(
            model_name="postvoteevent",
            name="post",
            field=models.ForeignKey(
                db_constraint=False,
                help_text="The post this vote is for.",
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="core.post",
                verbose_name="Post",
            ),
        ),
        migrations.AddField(
            model_name="postvoteevent",
            name="user",
            field=models.ForeignKey(
                db_constraint=False,
                help_text="The voter.",
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="User",
            ),
        ),
        migrations.AddField(
            model_name="userpostview",
            name="post",
            field=models.ForeignKey(
                help_text="The post that is viewed.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="post_views",
                to="core.post",
                verbose_name="Post",
            ),
        ),
        migrations.AddField(
            model_name="userpostview",
            name="user",
            field=models.ForeignKey(
                help_text="The user who viewed the post.",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="post_views",
                to=settings.AUTH_USER_MODEL,
                verbose_name="User",
            ),
        ),
        migrations.AddField(
            model_name="userpostviewevent",
            name="pgh_context",
            field=models.ForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="pghistory.context",
            ),
        ),
        migrations.AddField(
            model_name="userpostviewevent",
            name="pgh_obj",
            field=models.ForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="events",
                to="core.userpostview",
            ),
        ),
        migrations.AddField(
            model_name="userpostviewevent",
            name="post",
            field=models.ForeignKey(
                db_constraint=False,
                help_text="The post that is viewed.",
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to="core.post",
                verbose_name="Post",
            ),
        ),
        migrations.AddField(
            model_name="userpostviewevent",
            name="user",
            field=models.ForeignKey(
                db_constraint=False,
                help_text="The user who viewed the post.",
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                related_query_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="User",
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="originalsourceclaim",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "core_originalsourceclaimevent" ("comment", "contact_information", "created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "post_id", "slug", "source", "status", "updated_at", "user_id") VALUES (NEW."comment", NEW."contact_information", NEW."created_at", NEW."id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."post_id", NEW."slug", NEW."source", NEW."status", NEW."updated_at", NEW."user_id"); RETURN NULL;',
                    hash="ababf65d0cb999e438e764d7c738473c8c4d3272",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_1e9a2",
                    table="core_originalsourceclaim",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="originalsourceclaim",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "core_originalsourceclaimevent" ("comment", "contact_information", "created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "post_id", "slug", "source", "status", "updated_at", "user_id") VALUES (NEW."comment", NEW."contact_information", NEW."created_at", NEW."id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."post_id", NEW."slug", NEW."source", NEW."status", NEW."updated_at", NEW."user_id"); RETURN NULL;',
                    hash="b4804f32fc2435ba83a6a93f38900fdbb761bf00",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_c0a25",
                    table="core_originalsourceclaim",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="originalsourceclaim",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "core_originalsourceclaimevent" ("comment", "contact_information", "created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "post_id", "slug", "source", "status", "updated_at", "user_id") VALUES (OLD."comment", OLD."contact_information", OLD."created_at", OLD."id", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."post_id", OLD."slug", OLD."source", OLD."status", OLD."updated_at", OLD."user_id"); RETURN NULL;',
                    hash="ab89699b9099dc755f7772ee31f584af79cf3205",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_5484f",
                    table="core_originalsourceclaim",
                    when="AFTER",
                ),
            ),
        ),
        migrations.AddConstraint(
            model_name="postcomment",
            constraint=models.CheckConstraint(
                condition=models.Q(("body__length__gte", 0)), name="post_comment_comment_minimum_length"
            ),
        ),
        migrations.AddConstraint(
            model_name="postcomment",
            constraint=models.CheckConstraint(
                condition=models.Q(("body__length__lte", 1000)), name="post_comment_comment_maximum_length"
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="postcomment",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "core_postcommentevent" ("body", "created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "post_id", "slug", "updated_at", "user_id") VALUES (NEW."body", NEW."created_at", NEW."id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."post_id", NEW."slug", NEW."updated_at", NEW."user_id"); RETURN NULL;',
                    hash="30d96ac9dc5d7f06f745dc592f65cbd37311b4c0",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_f06eb",
                    table="core_postcomment",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="postcomment",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "core_postcommentevent" ("body", "created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "post_id", "slug", "updated_at", "user_id") VALUES (NEW."body", NEW."created_at", NEW."id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."post_id", NEW."slug", NEW."updated_at", NEW."user_id"); RETURN NULL;',
                    hash="339f50ed309ef90533bd6ae9c50d5945ef19bf90",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_97b3a",
                    table="core_postcomment",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="postcomment",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "core_postcommentevent" ("body", "created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "post_id", "slug", "updated_at", "user_id") VALUES (OLD."body", OLD."created_at", OLD."id", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."post_id", OLD."slug", OLD."updated_at", OLD."user_id"); RETURN NULL;',
                    hash="a9af349184d50bd8f1465a068d0501c0624f3c79",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_2ffd1",
                    table="core_postcomment",
                    when="AFTER",
                ),
            ),
        ),
        migrations.AddConstraint(
            model_name="postcommentvote",
            constraint=models.UniqueConstraint(fields=("user", "post"), name="unique_post_comment_vote"),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="postcommentvote",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "core_postcommentvoteevent" ("body", "created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "post_id", "slug", "updated_at", "user_id") VALUES (NEW."body", NEW."created_at", NEW."id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."post_id", NEW."slug", NEW."updated_at", NEW."user_id"); RETURN NULL;',
                    hash="022f14c8e2fdb396a81adee7a06ac7e40487074b",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_7235c",
                    table="core_postcommentvote",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="postcommentvote",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "core_postcommentvoteevent" ("body", "created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "post_id", "slug", "updated_at", "user_id") VALUES (NEW."body", NEW."created_at", NEW."id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."post_id", NEW."slug", NEW."updated_at", NEW."user_id"); RETURN NULL;',
                    hash="44a919e69ef1babc715904f9a5c4c53278cd420f",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_38d10",
                    table="core_postcommentvote",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="postcommentvote",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "core_postcommentvoteevent" ("body", "created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "post_id", "slug", "updated_at", "user_id") VALUES (OLD."body", OLD."created_at", OLD."id", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."post_id", OLD."slug", OLD."updated_at", OLD."user_id"); RETURN NULL;',
                    hash="22e4ddc4b3247e57c5884c30015ce10e30d8ac13",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_b3a46",
                    table="core_postcommentvote",
                    when="AFTER",
                ),
            ),
        ),
        migrations.AddConstraint(
            model_name="postobjecttag",
            constraint=models.UniqueConstraint(fields=("tag", "post"), name="unique_post_object_tag"),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="postobjecttag",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "core_postobjecttagevent" ("created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "post_id", "slug", "tag_id", "updated_at") VALUES (NEW."created_at", NEW."id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."post_id", NEW."slug", NEW."tag_id", NEW."updated_at"); RETURN NULL;',
                    hash="17bb4e7b9c8baf8b2d6e9bf8ae55bc8e6ef7bda5",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_4f192",
                    table="core_postobjecttag",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="postobjecttag",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "core_postobjecttagevent" ("created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "post_id", "slug", "tag_id", "updated_at") VALUES (NEW."created_at", NEW."id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."post_id", NEW."slug", NEW."tag_id", NEW."updated_at"); RETURN NULL;',
                    hash="7433124279ec638fc63e233a5aca39f7bae3a389",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_fc89a",
                    table="core_postobjecttag",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="postobjecttag",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "core_postobjecttagevent" ("created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "post_id", "slug", "tag_id", "updated_at") VALUES (OLD."created_at", OLD."id", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."post_id", OLD."slug", OLD."tag_id", OLD."updated_at"); RETURN NULL;',
                    hash="42f8d239432087f9465fc48534322bf8d9452f8c",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_e571f",
                    table="core_postobjecttag",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="post",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "core_postevent" ("average_hash", "colorhash", "created_at", "cryptographic_hash", "dhash", "extracted_text_normalized", "extracted_text_raw", "id", "image", "initial_id", "is_repost", "original_source", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "phash", "slug", "title", "updated_at", "user_id", "whash") VALUES (NEW."average_hash", NEW."colorhash", NEW."created_at", NEW."cryptographic_hash", NEW."dhash", NEW."extracted_text_normalized", NEW."extracted_text_raw", NEW."id", NEW."image", NEW."initial_id", NEW."is_repost", NEW."original_source", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."phash", NEW."slug", NEW."title", NEW."updated_at", NEW."user_id", NEW."whash"); RETURN NULL;',
                    hash="06b6cfd89a7679b2ee60b0ef75bb029ff54f939a",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_1a363",
                    table="core_post",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="post",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "core_postevent" ("average_hash", "colorhash", "created_at", "cryptographic_hash", "dhash", "extracted_text_normalized", "extracted_text_raw", "id", "image", "initial_id", "is_repost", "original_source", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "phash", "slug", "title", "updated_at", "user_id", "whash") VALUES (NEW."average_hash", NEW."colorhash", NEW."created_at", NEW."cryptographic_hash", NEW."dhash", NEW."extracted_text_normalized", NEW."extracted_text_raw", NEW."id", NEW."image", NEW."initial_id", NEW."is_repost", NEW."original_source", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."phash", NEW."slug", NEW."title", NEW."updated_at", NEW."user_id", NEW."whash"); RETURN NULL;',
                    hash="c03444dd91f30f15018526f200974ecefbedd25a",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_7429e",
                    table="core_post",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="post",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "core_postevent" ("average_hash", "colorhash", "created_at", "cryptographic_hash", "dhash", "extracted_text_normalized", "extracted_text_raw", "id", "image", "initial_id", "is_repost", "original_source", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "phash", "slug", "title", "updated_at", "user_id", "whash") VALUES (OLD."average_hash", OLD."colorhash", OLD."created_at", OLD."cryptographic_hash", OLD."dhash", OLD."extracted_text_normalized", OLD."extracted_text_raw", OLD."id", OLD."image", OLD."initial_id", OLD."is_repost", OLD."original_source", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."phash", OLD."slug", OLD."title", OLD."updated_at", OLD."user_id", OLD."whash"); RETURN NULL;',
                    hash="e4afa9cdea5cea53f66d7d4d3b739ef8d31c11d9",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_edf98",
                    table="core_post",
                    when="AFTER",
                ),
            ),
        ),
        migrations.AddConstraint(
            model_name="postvote",
            constraint=models.UniqueConstraint(fields=("user", "post"), name="unique_post_vote"),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="postvote",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "core_postvoteevent" ("body", "created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "post_id", "slug", "updated_at", "user_id") VALUES (NEW."body", NEW."created_at", NEW."id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."post_id", NEW."slug", NEW."updated_at", NEW."user_id"); RETURN NULL;',
                    hash="c537b470f34c6992ef5478ffb5f2c75ffe3b0c2b",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_c58b5",
                    table="core_postvote",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="postvote",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "core_postvoteevent" ("body", "created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "post_id", "slug", "updated_at", "user_id") VALUES (NEW."body", NEW."created_at", NEW."id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."post_id", NEW."slug", NEW."updated_at", NEW."user_id"); RETURN NULL;',
                    hash="1d07aeec93ce5c494e242e41b3d9df60aa158034",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_00eb5",
                    table="core_postvote",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="postvote",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "core_postvoteevent" ("body", "created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "post_id", "slug", "updated_at", "user_id") VALUES (OLD."body", OLD."created_at", OLD."id", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."post_id", OLD."slug", OLD."updated_at", OLD."user_id"); RETURN NULL;',
                    hash="5befc846c41abd06010f2ea1ac8e54c9987e0a47",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_c3c5a",
                    table="core_postvote",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="userpostview",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "core_userpostviewevent" ("created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "post_id", "slug", "updated_at", "user_id") VALUES (NEW."created_at", NEW."id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."post_id", NEW."slug", NEW."updated_at", NEW."user_id"); RETURN NULL;',
                    hash="ee16dfc764f81d71b0acc82386a6bb5f86f5b6e6",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_dfa6e",
                    table="core_userpostview",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="userpostview",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "core_userpostviewevent" ("created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "post_id", "slug", "updated_at", "user_id") VALUES (NEW."created_at", NEW."id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."post_id", NEW."slug", NEW."updated_at", NEW."user_id"); RETURN NULL;',
                    hash="8cbd05463d22ab56ec0509818e1e9a682d478ee6",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_8966d",
                    table="core_userpostview",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="userpostview",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "core_userpostviewevent" ("created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "post_id", "slug", "updated_at", "user_id") VALUES (OLD."created_at", OLD."id", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."post_id", OLD."slug", OLD."updated_at", OLD."user_id"); RETURN NULL;',
                    hash="3c3948fee6835285b7d6ad3fdd7de3eb92fa06fe",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_7602b",
                    table="core_userpostview",
                    when="AFTER",
                ),
            ),
        ),
    ]
