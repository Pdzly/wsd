# Generated by Django 5.1.3 on 2025-04-28 19:11

import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0013_alter_postcomment_body_text_and_more"),
    ]

    operations = [
        pgtrigger.migrations.RemoveTrigger(
            model_name="postcomment",
            name="insert_insert",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="postcomment",
            name="update_update",
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name="postcomment",
            name="delete_delete",
        ),
        migrations.AddField(
            model_name="postcomment",
            name="body",
            field=models.JSONField(
                default=dict,
                help_text="The actual comment as JSON.",
                verbose_name="Body",
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="postcommentevent",
            name="body",
            field=models.JSONField(
                default=dict,
                help_text="The actual comment as JSON.",
                verbose_name="Body",
            ),
            preserve_default=False,
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="postcomment",
            trigger=pgtrigger.compiler.Trigger(
                name="insert_insert",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "core_postcommentevent" ("body", "body_text", "created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "post_id", "slug", "updated_at", "user_id") VALUES (NEW."body", NEW."body_text", NEW."created_at", NEW."id", _pgh_attach_context(), NOW(), \'insert\', NEW."id", NEW."post_id", NEW."slug", NEW."updated_at", NEW."user_id"); RETURN NULL;',
                    hash="a532a12f40ef22adab8407d61c81b9e89b650cd8",
                    operation="INSERT",
                    pgid="pgtrigger_insert_insert_f06eb",
                    table="core_postcomment",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="postcomment",
            trigger=pgtrigger.compiler.Trigger(
                name="update_update",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition="WHEN (OLD.* IS DISTINCT FROM NEW.*)",
                    func='INSERT INTO "core_postcommentevent" ("body", "body_text", "created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "post_id", "slug", "updated_at", "user_id") VALUES (NEW."body", NEW."body_text", NEW."created_at", NEW."id", _pgh_attach_context(), NOW(), \'update\', NEW."id", NEW."post_id", NEW."slug", NEW."updated_at", NEW."user_id"); RETURN NULL;',
                    hash="6ddd81bfb8dbf1e146ec3a40c4840c3600ebefb0",
                    operation="UPDATE",
                    pgid="pgtrigger_update_update_97b3a",
                    table="core_postcomment",
                    when="AFTER",
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name="postcomment",
            trigger=pgtrigger.compiler.Trigger(
                name="delete_delete",
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='INSERT INTO "core_postcommentevent" ("body", "body_text", "created_at", "id", "pgh_context_id", "pgh_created_at", "pgh_label", "pgh_obj_id", "post_id", "slug", "updated_at", "user_id") VALUES (OLD."body", OLD."body_text", OLD."created_at", OLD."id", _pgh_attach_context(), NOW(), \'delete\', OLD."id", OLD."post_id", OLD."slug", OLD."updated_at", OLD."user_id"); RETURN NULL;',
                    hash="fee4859563aaf080bbdde1ed03654b9cb9bf3e97",
                    operation="DELETE",
                    pgid="pgtrigger_delete_delete_2ffd1",
                    table="core_postcomment",
                    when="AFTER",
                ),
            ),
        ),
    ]
